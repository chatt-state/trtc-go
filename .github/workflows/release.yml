name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      # Extract version from tag
      - name: Set Version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version: $VERSION"
      
      # Create a release with notes from CHANGELOG.md
      - name: Create Release with Changelog
        run: |
          # Extract the relevant section from CHANGELOG.md
          VERSION=${{ env.VERSION }}
          # Use awk to extract the section for the current version
          NOTES=$(awk -v ver="## [$VERSION]" 'BEGIN{flag=0} $0~ver{flag=1} flag&&/^## \[[0-9]+\.[0-9]+\.[0-9]+\]/{if($0!=ver)flag=0} flag{print}' CHANGELOG.md)
          # Create the release using GitHub CLI
          gh release create v$VERSION \
            --title "trtc-go v$VERSION" \
            --notes "$NOTES" \
            --draft=false
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Install dependencies for GUI builds
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev xorg-dev gcc pkg-config

      # Install fyne-cross for proper cross-compilation
      - name: Install fyne-cross
        run: |
          go install github.com/fyne-io/fyne-cross@latest
          echo "fyne-cross version:"
          fyne-cross version

      # Create source code archives
      - name: Create Source Code Archives
        run: |
          # Create a zip archive of the source code
          git archive --format=zip --output=trtc-go-src_${{ env.VERSION }}.zip HEAD
          # Create a tar.gz archive of the source code
          git archive --format=tar.gz --output=trtc-go-src_${{ env.VERSION }}.tar.gz HEAD

      # Build CLI with GoReleaser (no CGO needed)
      - name: Build CLI with GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          args: release --clean --timeout 30m --config .goreleaser.cli.yml --skip=publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Build GUI for each platform using fyne-cross
      # fyne-cross automatically sets the appropriate environment for each platform
      - name: Build GUI for Windows
        run: |
          fyne-cross windows -arch=amd64 -output TRTC -app-id "io.github.chatt-state.trtc-go" -app-version ${{ env.VERSION }} -ldflags="-X=github.com/chatt-state/trtc-go/cmd/gui.Version=${{ env.VERSION }}" ./cmd/gui
          # Rename the output file to match our naming convention
          mv fyne-cross/dist/windows-amd64/TRTC.zip fyne-cross/dist/windows-amd64/trtc-go-gui_${{ env.VERSION }}_windows_amd64.zip

      - name: Build GUI for Linux
        run: |
          fyne-cross linux -arch=amd64 -output TRTC -app-id "io.github.chatt-state.trtc-go" -app-version ${{ env.VERSION }} -ldflags="-X=github.com/chatt-state/trtc-go/cmd/gui.Version=${{ env.VERSION }}" ./cmd/gui
          # Rename the output file to match our naming convention
          mv fyne-cross/dist/linux-amd64/TRTC.tar.xz fyne-cross/dist/linux-amd64/trtc-go-gui_${{ env.VERSION }}_linux_amd64.tar.xz

      # Upload assets to the release
      - name: Upload Assets to Release
        run: |
          # Find all CLI artifacts
          CLI_ARTIFACTS=$(find dist -type f -name "trtc-go-cli_*")
          
          # Upload CLI artifacts
          for artifact in $CLI_ARTIFACTS; do
            gh release upload v${{ env.VERSION }} "$artifact"
          done
          
          # Upload GUI artifacts
          gh release upload v${{ env.VERSION }} fyne-cross/dist/windows-amd64/trtc-go-gui_${{ env.VERSION }}_windows_amd64.zip
          gh release upload v${{ env.VERSION }} fyne-cross/dist/linux-amd64/trtc-go-gui_${{ env.VERSION }}_linux_amd64.tar.xz
          
          # Upload source code archives
          gh release upload v${{ env.VERSION }} trtc-go-src_${{ env.VERSION }}.zip
          gh release upload v${{ env.VERSION }} trtc-go-src_${{ env.VERSION }}.tar.gz
          
          # Upload checksums file
          gh release upload v${{ env.VERSION }} dist/trtc-go_${{ env.VERSION }}_checksums.txt
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # macOS build using native macOS GitHub runner
  macos-build:
    needs: build
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      # Extract version from tag
      - name: Set Version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version: $VERSION"

      # Install dependencies for GUI builds
      - name: Install Dependencies
        run: |
          brew install gcc

      # Install Fyne CLI
      - name: Install Fyne CLI
        run: |
          go install fyne.io/fyne/v2/cmd/fyne@latest

      # Build GUI natively on macOS
      - name: Build GUI for macOS
        run: |
          cd cmd/gui
          go mod tidy
          # First build the binary with version information
          go build -o trtc-go-gui -ldflags "-X github.com/chatt-state/trtc-go/cmd/gui.Version=${{ env.VERSION }}"
          # Then package it with fyne
          fyne package -os darwin -executable trtc-go-gui -icon ../../icon.png -appID "io.github.chatt-state.trtc-go" -name "TRTC" -release
          cd ../..

      # Create a zip file of the .app bundle
      - name: Package macOS App
        run: |
          # The app bundle is created in the cmd/gui directory
          cd cmd/gui
          VERSION=${{ env.VERSION }}
          zip -r ../../trtc-go-gui_${VERSION}_darwin_amd64.zip TRTC.app
          cd ../..

      # Upload macOS build to the release
      - name: Upload macOS Build to Release
        run: |
          gh release upload v${{ env.VERSION }} trtc-go-gui_${{ env.VERSION }}_darwin_amd64.zip
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 